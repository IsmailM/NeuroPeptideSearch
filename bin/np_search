#!/usr/bin/env ruby

require 'np_search/version'
require 'np_search'
require 'bio'
require 'fileutils'
require 'optparse'
require 'logger'
require 'haml'

# Search for the signal p directory with signal peptide. 
signalp_dir = "#{Dir.home}/SignalPeptide"

help_banner = <<BANNER

Usage: np_search [options] InputType Motif InputFile Output_Prefix

Where:

InputType     = The type of data in the input query file. The only two options 
                available are "genetic" and "protein".
 
Motif         = The query motif to be searched for.
                The period "." can be used to denote any character. Multiple 
                motifs query can be used by using a pipeline character ("|")
                between each query and putting the motif query in speech marks 
                e.g. "KR|RR|R..R".
                Advanced Users: Regular expressions are supported in the motif.

Input_File    = The input query file.

Output_Prefix = The Name of the output folder.

Options:

BANNER

options =<<OPTIONS 
    -v, --verbose                    Provides more information on each step taken in this program.
    -a, --output_all                 Outputs all possible files
    -d, --debug                      Debugs the program
    -h, --help                       Display this screen
OPTIONS

options = {}
optparse = OptionParser.new do|opts|
  opts.banner = help_banner

  options[:verbose] = false
  opts.on( '-v', '--verbose', 'Provides more information on each step taken'\
                              ' in this program.' ) do
    options[:verbose] = true
  end

  options[:output_all] = false
  opts.on( '-a', '--output_all', 'Outputs all possible files' ) do
    options[:output_all] = true
  end
  
  options[:debug] = false
  opts.on( '-d', '--debug', 'Debugs the program' ) do
    options[:debug] = true
  end
  
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end
optparse.parse!

unless ARGV.size == 4
  puts "There are less than four arguments supplied. Please correct this."
  puts # a blank line
  puts help_banner
  puts # a blank line
  puts options
  puts # a blank line
  exit
end

ORF_min_length = 10
input_type     = ARGV[0] # e.g. 'genetic' or 'protein' 
motif_query    = ARGV[1] # e.g. 'neuro_clv'
input          = ARGV[2] # e.g. 'example_files/genetic.fa'
output_dir     = ARGV[3]


if motif_query == 'neuro_clv'
  motif = 'KK|KR|RR|'\
          'R..R|R....R|R......R|H..R|H....R|H......R|K..R|K....R|K......R'
else
  motif = motif_query
end

############# Set up variables to pass to logger in the library file...##############
if options[:verbose]
  verbose_opt = 'verbose'
else
  verbose_opt = 'not_verbose'
end

if options[:debug]
  debug_opt = 'debug'
else
  debug_opt = 'not_debug'
end

############# Input Validation...##############
input_validators = NpSearch::Validators.new(verbose_opt, debug_opt)
signalp_directory = input_validators.signalp_validator(signalp_dir)
input_validators.output_dir_validator(output_dir)
input_validators.orf_min_length_validator(ORF_min_length)
input_validators.input_file_validator(input)
input_validators.input_type_validator(input_type)

############# Initialise Outputs...##############
to_output = NpSearch::Output.new

############# Converting input file to Bio::FastaFormat. #############
input_file = NpSearch::Input.new
input_read = input_file.read(input, input_type)

############# Extract_ORF #############
if input_type.downcase == 'genetic'
  translater = NpSearch::Translation.new
  # Translate Sequences in all 6 frames
  translated_sequences = translater.translate(input_read)
  to_output.to_fasta("translated sequences", translated_sequences, "#{output_dir}/1_protein.fa") if options[:output_all]
  # Extract all possible ORF
  orf = translater.extract_orf(translated_sequences)
  to_output.to_fasta("extracted Open Reading Frames", orf, "#{output_dir}/2_orf.fa") if options[:output_all]
  orf_clean = translater.orf_cleaner(orf, ORF_min_length)
  to_output.to_fasta("cleaned Open Reading Frames" , orf_clean, "#{output_dir}/3_orf_clean.fa")
end

############# Signal P #############
if input_type.downcase == 'genetic'
  signalp_input_file = "#{output_dir}/3_orf_clean.fa"
  signalp_hash = orf_clean
  i = 4
else
  signalp_input_file = input
  signalp_hash = input_read
  i = 1
end

signalp_test = NpSearch::Signalp.new
signalp_test.signalp(signalp_directory, signalp_input_file, "#{output_dir}/#{i}_signalp_out.txt")
input_validators.signalp_version_validator("#{output_dir}/#{i}_signalp_out.txt") 


############# Data Analysis #############
data_analysis = NpSearch::Analysis.new
identified_positives = data_analysis.signalp_positives_extractor("#{output_dir}/#{i}_signalp_out.txt", "#{output_dir}/#{i + 1}_signalp_positives.txt", "signalp_positives_file")
signalp = data_analysis.array_generator(identified_positives)
secretome = data_analysis.parse(signalp, signalp_hash, motif)
i += 2
to_output.to_fasta("secretome", secretome, "#{output_dir}/#{i}_Secretome.fa")
i += 1


############# Creating Output Files #############
flattened_seq = data_analysis.flattener(secretome)
to_output.to_fasta("fasta output file", flattened_seq, "#{output_dir}/#{i}_output.fa")
doc_hash = to_output.make_doc_hash(flattened_seq, motif)
to_output.to_doc(doc_hash, "#{output_dir}/#{i}_output.doc")

# Success
puts "\nSuccess: All output files created in the directory: '#{output_dir}'.\n "