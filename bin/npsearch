#!/usr/bin/env ruby
require 'optparse'

require 'npsearch'
require 'npsearch/arg_validator'
require 'npsearch/version'

opt = {}
optparse = OptionParser.new do |opts|
  opts.banner = <<Banner
* Description: A tool to identify novel neuropeptides.

* Usage: npsearch [Options] [Input File]

* Options
Banner

  opt[:signalp_path] = 'signalp'
  opts.on('-s', '--signalp_path path_to_signalp',
          'The full path to the signalp script. This can be downloaded from',
          ' CBS. See https://www.github.com/wurmlab/NpSearch for more',
          ' information') do |p|
    opt[:signalp_path] = p
  end

  opt[:usearch_path] = 'usearch'
  opts.on('-u', '--usearch_path path_to_usearch',
          'The full path to the usearch binary. This script can be downloaded',
          ' from .... See https://www.github.com/wurmlab/NpSearch for more',
          ' information') do |p|
    opt[:usearch_path] = p
  end

  opt[:temp_dir] = File.join(Dir.pwd, '.temp')
  opts.on('-d', '--temp_dir path_to_temp_dir',
          'The full path to the temp dir. NpSearch will create the folder and',
          ' then delete the folder once it has finished using them.',
          ' Default: Hidden folder in the current working dirctory') do |p|
    opt[:temp_dir] = p
  end

  opt[:num_threads] = 1
  opts.on('-n', '--num_threads num_of_threads', Integer,
          'The number of threads to use when analysing the input file') do |n|
    opt[:num_threads] = n
  end

  opt[:min_orf_length] = 30
  opts.on('-m', '--min_orf_length N', Integer,
          'The minimum length of a potential neuropeptide precursor.',
          ' Default: 30') do |n|
    opt[:min_orf_length] = n
  end

  opt[:max_seq_length] = 600
  opts.on('-m', '--max_seq_length N', Integer,
          'The maximum length of a potential neuropeptide precursor.',
          ' Default: 600') do |n|
    opt[:max_seq_length] = n
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end

  opts.on('-v', '--version', 'Shows version') do
    puts NpSearch::VERSION
    exit
  end
end
begin
  optparse.parse!
  if ARGV.length > 1
    $stderr.puts "Error: It seems that you have #{ARGV.length} input fasta" \
                 ' files. Please ensure that you have a single input fasta' \
                 " file\n"
    exit 1
  elsif ARGV.length == 0
    $stderr.puts optparse
    exit 1
  end
rescue OptionParser::ParseError
  $stderr.print 'Error: ' + $ERROR_INFO.to_s + '\n'
  exit 1
end

opt[:input_file] = ARGV[0]

NpSearch.init(opt)
NpSearch.run
